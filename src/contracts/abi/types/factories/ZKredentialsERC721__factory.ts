/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  ZKredentialsERC721,
  ZKredentialsERC721Interface,
} from "../ZKredentialsERC721";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "Registered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_tokenURI",
        type: "string",
      },
    ],
    name: "setTokenURI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040518060400160405280601381526020017f5a4b726564656e7469616c732047697448756200000000000000000000000000815250604051806040016040528060038152602001625a4b4760e81b815250816000908162000075919062000132565b50600162000084828262000132565b505050620001fe565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000b857607f821691505b602082108103620000d957634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200012d57600081815260208120601f850160051c81016020861015620001085750805b601f850160051c820191505b81811015620001295782815560010162000114565b5050505b505050565b81516001600160401b038111156200014e576200014e6200008d565b62000166816200015f8454620000a3565b84620000df565b602080601f8311600181146200019e5760008415620001855750858301515b600019600386901b1c1916600185901b17855562000129565b600085815260208120601f198616915b82811015620001cf57888601518255948401946001909101908401620001ae565b5085821015620001ee5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b611550806200020e6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806342842e0e11610097578063a22cb46511610066578063a22cb46514610212578063b88d4fde14610225578063c87b56dd14610238578063e985e9c51461024b57600080fd5b806342842e0e146101c35780636352211e146101d657806370a08231146101e957806395d89b411461020a57600080fd5b8063162094c4116100d3578063162094c4146101825780631aa3a0081461019557806323b872dd1461019d57806340c10f19146101b057600080fd5b806301ffc9a71461010557806306fdde031461012d578063081812fc14610142578063095ea7b31461016d575b600080fd5b610118610113366004610f88565b610287565b60405190151581526020015b60405180910390f35b6101356102d9565b6040516101249190610ff9565b61015561015036600461100c565b61036b565b6040516001600160a01b039091168152602001610124565b61018061017b366004611041565b610392565b005b6101806101903660046110f7565b6104ac565b61018061053e565b6101806101ab366004611152565b6105da565b6101806101be366004611041565b61060b565b6101806101d1366004611152565b610673565b6101556101e436600461100c565b61068e565b6101fc6101f736600461118e565b6106ee565b604051908152602001610124565b610135610774565b6101806102203660046111a9565b610783565b6101806102333660046111e5565b61078e565b61013561024636600461100c565b6107c6565b610118610259366004611261565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b14806102b857506001600160e01b03198216635b5e139f60e01b145b806102d357506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546102e890611294565b80601f016020809104026020016040519081016040528092919081815260200182805461031490611294565b80156103615780601f1061033657610100808354040283529160200191610361565b820191906000526020600020905b81548152906001019060200180831161034457829003601f168201915b5050505050905090565b6000610376826108e5565b506000908152600460205260409020546001600160a01b031690565b600061039d8261068e565b9050806001600160a01b0316836001600160a01b03160361040f5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061042b575061042b8133610259565b61049d5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610406565b6104a78383610947565b505050565b6000828152600260205260409020546001600160a01b03166105255760405162461bcd60e51b815260206004820152602c60248201527f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610406565b3360009081526006602052604090206104a7828261131c565b3360009081526007602052604090205460ff16156105985760405162461bcd60e51b8152602060048201526017602482015276155cd95c88185b1c9958591e481c9959da5cdd195c9959604a1b6044820152606401610406565b33600081815260076020526040808220805460ff19166001179055517f2d3734a8e47ac8316e500ac231c90a6e1848ca2285f40d07eaa52005e4b3a0e99190a2565b6105e433826109b5565b6106005760405162461bcd60e51b8152600401610406906113dc565b6104a7838383610a34565b3360009081526007602052604090205460ff16156106655760405162461bcd60e51b8152602060048201526017602482015276155cd95c88185b1c9958591e481c9959da5cdd195c9959604a1b6044820152606401610406565b61066f8282610b98565b5050565b6104a78383836040518060200160405280600081525061078e565b6000818152600260205260408120546001600160a01b0316806102d35760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610406565b60006001600160a01b0382166107585760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610406565b506001600160a01b031660009081526003602052604090205490565b6060600180546102e890611294565b61066f338383610bb2565b61079833836109b5565b6107b45760405162461bcd60e51b8152600401610406906113dc565b6107c084848484610c80565b50505050565b6000818152600260205260409020546060906001600160a01b03166108455760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610406565b336000908152600660205260408120805461085f90611294565b80601f016020809104026020016040519081016040528092919081815260200182805461088b90611294565b80156108d85780601f106108ad576101008083540402835291602001916108d8565b820191906000526020600020905b8154815290600101906020018083116108bb57829003601f168201915b5093979650505050505050565b6000818152600260205260409020546001600160a01b03166109445760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610406565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061097c8261068e565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806109c18361068e565b9050806001600160a01b0316846001600160a01b03161480610a0857506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610a2c5750836001600160a01b0316610a218461036b565b6001600160a01b0316145b949350505050565b826001600160a01b0316610a478261068e565b6001600160a01b031614610a6d5760405162461bcd60e51b815260040161040690611429565b6001600160a01b038216610acf5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610406565b826001600160a01b0316610ae28261068e565b6001600160a01b031614610b085760405162461bcd60e51b815260040161040690611429565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61066f828260405180602001604052806000815250610cb3565b816001600160a01b0316836001600160a01b031603610c135760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610406565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610c8b848484610a34565b610c9784848484610ce6565b6107c05760405162461bcd60e51b81526004016104069061146e565b610cbd8383610de7565b610cca6000848484610ce6565b6104a75760405162461bcd60e51b81526004016104069061146e565b60006001600160a01b0384163b15610ddc57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610d2a9033908990889088906004016114c0565b6020604051808303816000875af1925050508015610d65575060408051601f3d908101601f19168201909252610d62918101906114fd565b60015b610dc2573d808015610d93576040519150601f19603f3d011682016040523d82523d6000602084013e610d98565b606091505b508051600003610dba5760405162461bcd60e51b81526004016104069061146e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610a2c565b506001949350505050565b6001600160a01b038216610e3d5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610406565b6000818152600260205260409020546001600160a01b031615610ea25760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610406565b6000818152600260205260409020546001600160a01b031615610f075760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610406565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b03198116811461094457600080fd5b600060208284031215610f9a57600080fd5b8135610fa581610f72565b9392505050565b6000815180845260005b81811015610fd257602081850181015186830182015201610fb6565b81811115610fe4576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610fa56020830184610fac565b60006020828403121561101e57600080fd5b5035919050565b80356001600160a01b038116811461103c57600080fd5b919050565b6000806040838503121561105457600080fd5b61105d83611025565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561109c5761109c61106b565b604051601f8501601f19908116603f011681019082821181831017156110c4576110c461106b565b816040528093508581528686860111156110dd57600080fd5b858560208301376000602087830101525050509392505050565b6000806040838503121561110a57600080fd5b82359150602083013567ffffffffffffffff81111561112857600080fd5b8301601f8101851361113957600080fd5b61114885823560208401611081565b9150509250929050565b60008060006060848603121561116757600080fd5b61117084611025565b925061117e60208501611025565b9150604084013590509250925092565b6000602082840312156111a057600080fd5b610fa582611025565b600080604083850312156111bc57600080fd5b6111c583611025565b9150602083013580151581146111da57600080fd5b809150509250929050565b600080600080608085870312156111fb57600080fd5b61120485611025565b935061121260208601611025565b925060408501359150606085013567ffffffffffffffff81111561123557600080fd5b8501601f8101871361124657600080fd5b61125587823560208401611081565b91505092959194509250565b6000806040838503121561127457600080fd5b61127d83611025565b915061128b60208401611025565b90509250929050565b600181811c908216806112a857607f821691505b6020821081036112c857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156104a757600081815260208120601f850160051c810160208610156112f55750805b601f850160051c820191505b8181101561131457828155600101611301565b505050505050565b815167ffffffffffffffff8111156113365761133661106b565b61134a816113448454611294565b846112ce565b602080601f83116001811461137f57600084156113675750858301515b600019600386901b1c1916600185901b178555611314565b600085815260208120601f198616915b828110156113ae5788860151825594840194600190910190840161138f565b50858210156113cc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906114f390830184610fac565b9695505050505050565b60006020828403121561150f57600080fd5b8151610fa581610f7256fea26469706673582212204e6e94f9b7af4db94f4250fcab10761905e6ccffe0a03b70a250224267ee35ea64736f6c634300080f0033";

type ZKredentialsERC721ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ZKredentialsERC721ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ZKredentialsERC721__factory extends ContractFactory {
  constructor(...args: ZKredentialsERC721ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ZKredentialsERC721> {
    return super.deploy(overrides || {}) as Promise<ZKredentialsERC721>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ZKredentialsERC721 {
    return super.attach(address) as ZKredentialsERC721;
  }
  override connect(signer: Signer): ZKredentialsERC721__factory {
    return super.connect(signer) as ZKredentialsERC721__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ZKredentialsERC721Interface {
    return new utils.Interface(_abi) as ZKredentialsERC721Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ZKredentialsERC721 {
    return new Contract(address, _abi, signerOrProvider) as ZKredentialsERC721;
  }
}
